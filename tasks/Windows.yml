---

- name: Check for existing Nessus Agent installation.
  win_stat:
    path: "C:\\Program Files\\Tenable\\Nessus Agent"
  register: nessus_installed

- debug:
    var: nessus_installed
    verbosity: 1

# Skip all the download, copy, and install stuff if the files already exist.
- block:

  - set_fact:
      nessus_windows_architecture: "{{ (ansible_architecture == '64-bit') | ternary('x64','Win32') }}"

  - set_fact:
      data_file_name: "NessusAgent-{{ nessus_version }}-{{ nessus_windows_architecture }}.msi"

  - import_tasks: data_download_id.yml

  - set_fact:
      msi_install_arguments: "NESSUS_GROUPS=\"{{ nessus_agent_group }}\" NESSUS_SERVER=\"{{ nessus_agent_host }}\" NESSUS_KEY={{ nessus_agent_key }}"

  # https://docs.tenable.com/nessus/Content/InstallNessusAgentWindows.htm
  - name: Install MSI package.
    win_package:
      path: "https://tenable-downloads-production.s3.amazonaws.com/uploads/download/file/{{ nessus_download_id.stdout }}/{{ data_file_name }}"
      arguments: "{{ msi_install_arguments }}"
      creates_path: "C:\\Program Files\\Tenable\\Nessus Agent"
      creates_service: "Tenable Nessus Agent"
      state: present
    become: yes
    ignore_errors: "{{ ansible_check_mode }}"

  when: not nessus_installed.stat.exists

# Need to be elevated admin to read the nessus master.key file.
- name: Check agent link status.
  win_command: '"C:\Program Files\Tenable\Nessus Agent\nessuscli.exe" agent status'
  become: yes
  ignore_errors: yes
  register: nessus_link

# Need to be elevated admin to write the nessus master.key file.
- name: Link Nessus Agent.
  win_command: "C:\\Program Files\\Tenable\\Nessus Agent\\nessuscli.exe agent link --key={{ nessus_agent_key }} --host={{ nessus_agent_host }} --port={{ nessus_agent_port }} --groups=\"{{ nessus_agent_group }}\""
  become: yes
  when: nessus_link is failed
  notify: restart Tenable Nessus Agent
  ignore_errors: "{{ ansible_check_mode }}"
